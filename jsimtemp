*******************************************************************************
* LAB #2
* - Castillo, Hanzo
* - Jaso, Elijem
* - Marcelino, Jaren
*
*******************************************************************************

.include "8clocks.jsim"
.include "nominal.jsim"
.include "stdcell.jsim"

.subckt fx a b c d e f g out

    Xnand1 a b c x nand3    * since the function is a SOP function, we can efficiently use NAND gates
    Xnand2 d e y nand2      * by converting the function into a NAND-NAND circuit
    Xnand3 f g z nand2
    
    Xnand4 x y z out nand3

.ends

.subckt fa firstBit secondBit carryIn sum carryOut 

    Xxor1 firstBit secondBit firsthalfOut xor2                  * first half of via half adder implementation
    Xnandp1 firstBit secondBit nand_out1 nand2

    Xxor2 firsthalfOut carryIn sum xor2                            * second half of via half adder implementation
    Xnand2 firsthalfOut carryIn nand_out2 nand2

    Xannd3 nand_out1 nand_out2 carryOut nand2

.ends 

Xfunction clk1 clk2 clk3 clk4 clk5 clk6 clk7 out fx
Xfulladder clk5 clk6 clk7 adder_sum adder_cout fa

.tran 640ns
.plot clk1
.plot clk2
.plot clk3
.plot clk4
.plot clk5
.plot clk6
.plot clk7
.plot out
.plot adder_sum
.plot adder_cout
